# Xafra-ads v5 - Gateway Cloud Build with Homepage (SAFE TESTING)
# This build creates a TEST version before modifying production gateway

steps:
  # Step 1: Build homepage React app
  - name: 'node:18-alpine'
    dir: 'homepage'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Building React homepage..."
        npm install --silent
        npm run build
        echo "Homepage build completed"
        ls -la dist/
    id: 'build-homepage'

  # Step 2: Copy homepage build to nginx directory  
  - name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Copying homepage files to nginx directory..."
        mkdir -p infrastructure/nginx/homepage
        cp -r homepage/dist/* infrastructure/nginx/homepage/
        echo "Files copied successfully:"
        ls -la infrastructure/nginx/homepage/
    id: 'copy-homepage'
    waitFor: ['build-homepage']

  # Step 3: Build the gateway Docker image with homepage
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/xafra-ads/xafra-ads-v5/gateway-homepage-test:latest'
      - '-f'
      - 'infrastructure/nginx/Dockerfile-with-homepage'
      - '.'
    id: 'build-gateway-test'
    waitFor: ['copy-homepage']

  # Step 4: Push the test image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/xafra-ads/xafra-ads-v5/gateway-homepage-test:latest'
    id: 'push-gateway-test'
    waitFor: ['build-gateway-test']

  # Step 5: Deploy to NEW test service (NOT replacing existing gateway)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'gateway-homepage-test'
      - '--image'
      - 'us-central1-docker.pkg.dev/xafra-ads/xafra-ads-v5/gateway-homepage-test:latest'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-central1'
      - '--allow-unauthenticated'
      - '--port'
      - '80'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--concurrency'
      - '100'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '0'
      - '--timeout'
      - '30s'
      - '--set-env-vars'
      - 'ENVIRONMENT=staging-test,GATEWAY_VERSION=1.1.0-homepage'

    id: 'deploy-test-service'
    waitFor: ['push-gateway-test']

  # Step 6: Run basic tests on the new service
  - name: 'alpine/curl'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Testing new gateway service..."
        
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe gateway-homepage-test --region=us-central1 --format="value(status.url)")
        echo "Service URL: $${SERVICE_URL}"
        
        # Test homepage
        echo "Testing homepage..."
        curl -f "$${SERVICE_URL}/" -o /tmp/homepage.html || echo "Homepage test failed"
        
        # Test health check
        echo "Testing health check..."
        curl -f "$${SERVICE_URL}/gateway/health" || echo "Health check failed"
        
        # Test fallback
        echo "Testing fallback..."
        curl -f "$${SERVICE_URL}/nonexistent" || echo "Fallback test completed (expected)"
        
        echo "Basic tests completed"
    id: 'test-service'
    waitFor: ['deploy-test-service']

# Build options for faster execution
options:
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY

# Timeout for safety
timeout: '600s'

# Substitutions
substitutions:
  _SERVICE_NAME: 'gateway-homepage-test'
  _IMAGE_TAG: 'latest'