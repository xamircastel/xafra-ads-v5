# Xafra-ads v5 - API Gateway Configuration
# Nginx configuration optimized for Cloud Run microservices

user nginx;
worker_processes auto;
worker_rlimit_nofile 4096;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging format for microservices debugging
    log_format gateway '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'service="$upstream_addr" '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'uht="$upstream_header_time" urt="$upstream_response_time" '
                      'cache="$upstream_cache_status"';

    access_log /var/log/nginx/access.log gateway;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations for ad serving
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 1M;
    client_body_timeout 10s;
    client_header_timeout 10s;
    send_timeout 10s;

    # Buffer optimizations
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Gzip compression for API responses
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;

    # Rate limiting zones - Critical for ad traffic
    limit_req_zone $binary_remote_addr zone=api_general:10m rate=200r/s;
    limit_req_zone $binary_remote_addr zone=ads_redirect:10m rate=1000r/s;
    limit_req_zone $binary_remote_addr zone=tracking:10m rate=500r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=postback:10m rate=100r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn perip 20;

    # Upstream services - Cloud Run endpoints
    upstream core-service-backend {
        server core-service-prod-697203931362.us-central1.run.app:443 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream tracking-service-backend {
        server tracking-service-prod-697203931362.us-central1.run.app:443 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream auth-service-backend {
        server auth-service-prod-697203931362.us-central1.run.app:443 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream campaign-service-backend {
        server campaign-service-prod-697203931362.us-central1.run.app:443 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream postback-service-backend {
        server postback-service-prod-697203931362.us-central1.run.app:443 max_fails=2 fail_timeout=10s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # Proxy settings for Cloud Run (moved inside server block later)
    # These will be defined in the server context

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name api.xafra.com gateway.xafra.com localhost;
        
        # For staging, allow HTTP only
        include /etc/nginx/conf.d/gateway-routes.conf;
    }

    # HTTPS server (for production) - DISABLED FOR STAGING
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name api.xafra.com gateway.xafra.com;
    #     
    #     # SSL configuration (to be configured with actual certificates)
    #     # ssl_certificate /etc/ssl/certs/xafra.com.crt;
    #     # ssl_certificate_key /etc/ssl/private/xafra.com.key;
    #     # ssl_session_timeout 1d;
    #     # ssl_session_cache shared:MozTLS:10m;
    #     # ssl_session_tickets off;
    #     # ssl_protocols TLSv1.2 TLSv1.3;
    #     # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    #     # ssl_prefer_server_ciphers off;
    #     
    #     include /etc/nginx/conf.d/gateway-routes.conf;
    # }

    # Health check and status server
    server {
        listen 8080;
        server_name localhost;
        
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }
}
