#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script para agregar IP espec√≠fica a PostgreSQL de forma segura
    manteniendo acceso completo de Cloud Run

.DESCRIPTION
    Este script agrega tu IP personal a la whitelist de PostgreSQL
    para acceso con DBeaver sin afectar la conectividad de Cloud Run.
    Mantiene el acceso 0.0.0.0/0 existente para evitar interrupciones.

.PARAMETER UserIP
    La IP que se desea agregar (se detecta autom√°ticamente si no se especifica)

.PARAMETER DryRun
    Solo muestra los comandos que se ejecutar√≠an sin aplicar cambios

.EXAMPLE
    .\add-ip-to-postgresql.ps1
    .\add-ip-to-postgresql.ps1 -UserIP "192.168.1.100"
    .\add-ip-to-postgresql.ps1 -DryRun
#>

param(
    [string]$UserIP,
    [switch]$DryRun
)

# Configuraci√≥n
$INSTANCE_NAME = "xafra-ads-postgres"
$REGION = "us-central1"
$PROJECT_ID = (gcloud config get-value project)

Write-Host "üîê PostgreSQL IP Management Script" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green
Write-Host ""

# Funci√≥n para obtener IP p√∫blica actual
function Get-PublicIP {
    try {
        $ip = (Invoke-RestMethod -Uri "https://api.ipify.org?format=text" -TimeoutSec 10).Trim()
        if ($ip -match '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$') {
            return $ip
        }
    } catch {
        Write-Warning "No se pudo obtener IP autom√°ticamente: $($_.Exception.Message)"
    }
    
    # M√©todo alternativo
    try {
        $ip = (Invoke-RestMethod -Uri "https://ifconfig.me/ip" -TimeoutSec 10).Trim()
        if ($ip -match '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$') {
            return $ip
        }
    } catch {
        Write-Warning "M√©todo alternativo tambi√©n fall√≥: $($_.Exception.Message)"
    }
    
    return $null
}

# Funci√≥n para obtener configuraci√≥n actual
function Get-CurrentAuthorizedNetworks {
    try {
        $config = gcloud sql instances describe $INSTANCE_NAME --format="json" | ConvertFrom-Json
        return $config.settings.ipConfiguration.authorizedNetworks
    } catch {
        Write-Error "Error obteniendo configuraci√≥n actual: $($_.Exception.Message)"
        exit 1
    }
}

# Funci√≥n para validar IP
function Test-IPAddress {
    param([string]$IP)
    
    if ([string]::IsNullOrEmpty($IP)) {
        return $false
    }
    
    return $IP -match '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'
}

# 1. Determinar IP a agregar
if ([string]::IsNullOrEmpty($UserIP)) {
    Write-Host "üîç Detectando tu IP p√∫blica..." -ForegroundColor Yellow
    $UserIP = Get-PublicIP
    
    if (-not $UserIP) {
        Write-Host "‚ùå No se pudo detectar tu IP autom√°ticamente." -ForegroundColor Red
        $UserIP = Read-Host "Por favor ingresa tu IP manualmente"
    } else {
        Write-Host "‚úÖ IP detectada: $UserIP" -ForegroundColor Green
    }
}

# Validar IP
if (-not (Test-IPAddress -IP $UserIP)) {
    Write-Error "‚ùå IP inv√°lida: $UserIP"
    exit 1
}

Write-Host "üìã Configuraci√≥n:" -ForegroundColor Cyan
Write-Host "   Proyecto: $PROJECT_ID" -ForegroundColor White
Write-Host "   Instancia: $INSTANCE_NAME" -ForegroundColor White
Write-Host "   IP a agregar: $UserIP" -ForegroundColor White
if ($DryRun) {
    Write-Host "   Modo: DRY RUN (solo simulaci√≥n)" -ForegroundColor Yellow
}
Write-Host ""

# 2. Obtener configuraci√≥n actual
Write-Host "üîç Obteniendo configuraci√≥n actual..." -ForegroundColor Yellow
$currentNetworks = Get-CurrentAuthorizedNetworks

Write-Host "‚úÖ Redes autorizadas actuales:" -ForegroundColor Green
foreach ($network in $currentNetworks) {
    $name = if ($network.name) { $network.name } else { "(sin nombre)" }
    Write-Host "   $($network.value) - $name" -ForegroundColor White
}
Write-Host ""

# 3. Verificar si la IP ya existe
$ipExists = $currentNetworks | Where-Object { $_.value -eq $UserIP }
if ($ipExists) {
    Write-Host "‚ÑπÔ∏è  La IP $UserIP ya est√° autorizada." -ForegroundColor Blue
    Write-Host "‚úÖ No se requieren cambios." -ForegroundColor Green
    exit 0
}

# 4. Preparar comando para agregar IP
$newNetworkEntry = @{
    name = "DBeaver-Access-$(Get-Date -Format 'yyyyMMdd')"
    value = $UserIP
}

Write-Host "‚ûï Agregando nueva entrada:" -ForegroundColor Yellow
Write-Host "   Nombre: $($newNetworkEntry.name)" -ForegroundColor White
Write-Host "   IP: $($newNetworkEntry.value)" -ForegroundColor White
Write-Host ""

# 5. Construir comando gcloud
$networkParams = @()
foreach ($network in $currentNetworks) {
    $name = if ($network.name) { $network.name } else { "existing-$(Get-Random)" }
    $networkParams += "--authorized-networks"
    $networkParams += "$($network.value)/$name"
}

# Agregar nueva IP
$networkParams += "--authorized-networks"
$networkParams += "$($newNetworkEntry.value)/$($newNetworkEntry.name)"

$command = "gcloud sql instances patch $INSTANCE_NAME --authorized-networks=$(($networkParams | Where-Object { $_ -notmatch '^--authorized-networks$' }) -join ',')"

Write-Host "üîß Comando a ejecutar:" -ForegroundColor Cyan
Write-Host $command -ForegroundColor White
Write-Host ""

# 6. Ejecutar cambios o mostrar simulaci√≥n
if ($DryRun) {
    Write-Host "üîç DRY RUN - No se ejecutar√°n cambios reales" -ForegroundColor Yellow
    Write-Host "‚úÖ El comando anterior se ejecutar√≠a normalmente" -ForegroundColor Green
    exit 0
}

# Confirmaci√≥n del usuario
$confirmation = Read-Host "¬øDeseas continuar con la configuraci√≥n? (y/N)"
if ($confirmation -ne 'y' -and $confirmation -ne 'Y' -and $confirmation -ne 'yes') {
    Write-Host "‚ùå Operaci√≥n cancelada por el usuario" -ForegroundColor Red
    exit 0
}

Write-Host "‚ö° Aplicando cambios..." -ForegroundColor Yellow

try {
    # Ejecutar comando
    $result = Invoke-Expression $command
    
    Write-Host "‚úÖ Cambios aplicados exitosamente!" -ForegroundColor Green
    Write-Host ""
    
    # 7. Verificar cambios
    Write-Host "üîç Verificando configuraci√≥n actualizada..." -ForegroundColor Yellow
    Start-Sleep -Seconds 3
    
    $updatedNetworks = Get-CurrentAuthorizedNetworks
    
    Write-Host "‚úÖ Configuraci√≥n actualizada:" -ForegroundColor Green
    foreach ($network in $updatedNetworks) {
        $name = if ($network.name) { $network.name } else { "(sin nombre)" }
        $highlight = if ($network.value -eq $UserIP) { "Green" } else { "White" }
        Write-Host "   $($network.value) - $name" -ForegroundColor $highlight
    }
    
    Write-Host ""
    Write-Host "üéâ IP agregada exitosamente!" -ForegroundColor Green
    Write-Host "üí° Ya puedes usar DBeaver con la IP: $UserIP" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üìã Pr√≥ximos pasos:" -ForegroundColor Yellow
    Write-Host "   1. Configurar DBeaver con los nuevos permisos" -ForegroundColor White
    Write-Host "   2. Ejecutar monitoreo de IPs: node scripts/monitor-db-connections.js start" -ForegroundColor White
    Write-Host "   3. Optimizar VPC Connector: node scripts/optimize-vpc-connector.js analyze" -ForegroundColor White
    
} catch {
    Write-Error "‚ùå Error aplicando cambios: $($_.Exception.Message)"
    Write-Host ""
    Write-Host "üîÑ Para revertir cambios si es necesario:" -ForegroundColor Yellow
    Write-Host "gcloud sql instances patch $INSTANCE_NAME --clear-authorized-networks" -ForegroundColor White
    Write-Host "gcloud sql instances patch $INSTANCE_NAME --authorized-networks=0.0.0.0/0/allow-all" -ForegroundColor White
    exit 1
}

Write-Host ""
Write-Host "‚úÖ Script completado exitosamente" -ForegroundColor Green