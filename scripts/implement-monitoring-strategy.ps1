#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script maestro para implementar estrategia de monitoreo y optimizaci√≥n
    Implementa el plan acordado: agregar IP, monitoreo, y optimizaci√≥n VPC

.DESCRIPTION
    Este script implementa la estrategia completa:
    1. Agregar IP personal a PostgreSQL (sin riesgo)
    2. Configurar monitoreo de IPs de Cloud Run 
    3. Optimizar VPC Connector para reducir costos
    4. Establecer an√°lisis continuo de patrones IP

.PARAMETER SkipIPAddition
    Omite la adici√≥n de IP personal (√∫til si ya est√° agregada)

.PARAMETER SkipVPCOptimization  
    Omite la optimizaci√≥n del VPC Connector

.PARAMETER DryRun
    Solo muestra lo que se har√≠a sin ejecutar cambios

.EXAMPLE
    .\implement-monitoring-strategy.ps1
    .\implement-monitoring-strategy.ps1 -DryRun
    .\implement-monitoring-strategy.ps1 -SkipIPAddition
#>

param(
    [switch]$SkipIPAddition,
    [switch]$SkipVPCOptimization,
    [switch]$DryRun
)

$ErrorActionPreference = "Stop"

Write-Host "üöÄ Xafra-ads Database Monitoring & Optimization Strategy" -ForegroundColor Green
Write-Host "========================================================" -ForegroundColor Green
Write-Host ""

# Configuraci√≥n
$PROJECT_ID = (gcloud config get-value project)
$SCRIPT_DIR = Split-Path -Parent $MyInvocation.MyCommand.Path

Write-Host "üìã Plan de Implementaci√≥n:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Fase 1: Seguridad b√°sica (agregar tu IP)" -ForegroundColor White
Write-Host "   ‚úÖ Fase 2: Monitoreo de IPs Cloud Run" -ForegroundColor White  
Write-Host "   ‚úÖ Fase 3: Optimizaci√≥n VPC Connector" -ForegroundColor White
Write-Host "   üìä Fase 4: An√°lisis continuo de patrones" -ForegroundColor White
Write-Host ""

if ($DryRun) {
    Write-Host "üîç MODO DRY RUN - Solo simulaci√≥n" -ForegroundColor Yellow
    Write-Host ""
}

# Funci√≥n para ejecutar o simular comando
function Invoke-SafeCommand {
    param(
        [string]$Command,
        [string]$Description,
        [switch]$Critical = $false
    )
    
    Write-Host "‚ö° $Description..." -ForegroundColor Yellow
    Write-Host "   Comando: $Command" -ForegroundColor Gray
    
    if ($DryRun) {
        Write-Host "   [DRY RUN] Comando simulado" -ForegroundColor Blue
        return $true
    }
    
    try {
        $result = Invoke-Expression $Command
        Write-Host "   ‚úÖ Completado" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "   ‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
        if ($Critical) {
            throw
        }
        return $false
    }
}

# Fase 1: Agregar IP personal a PostgreSQL
Write-Host "üîê FASE 1: Configuraci√≥n de Acceso Seguro" -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Green

if (-not $SkipIPAddition) {
    Write-Host "Agregando tu IP a PostgreSQL para acceso con DBeaver..." -ForegroundColor Yellow
    
    if ($DryRun) {
        Write-Host "[DRY RUN] Ejecutar√≠a: .\add-ip-to-postgresql.ps1 -DryRun" -ForegroundColor Blue
    } else {
        try {
            & "$SCRIPT_DIR\add-ip-to-postgresql.ps1"
            Write-Host "‚úÖ IP agregada exitosamente" -ForegroundColor Green
        } catch {
            Write-Warning "Error agregando IP: $($_.Exception.Message)"
            Write-Host "‚ö†Ô∏è  Continuando con el resto del plan..." -ForegroundColor Yellow
        }
    }
} else {
    Write-Host "‚è≠Ô∏è  Omitiendo adici√≥n de IP (SkipIPAddition activado)" -ForegroundColor Blue
}

Write-Host ""

# Fase 2: Configurar monitoreo de IPs
Write-Host "üìä FASE 2: Configuraci√≥n de Monitoreo" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

Write-Host "Configurando monitoreo de conexiones de Cloud Run..." -ForegroundColor Yellow

# Crear directorio de logs si no existe
$logsDir = "$SCRIPT_DIR\..\logs"
if (-not (Test-Path $logsDir)) {
    New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
    Write-Host "‚úÖ Directorio de logs creado: $logsDir" -ForegroundColor Green
}

# Ejecutar una prueba inicial del monitoreo
$monitorCommand = "node `"$SCRIPT_DIR\monitor-db-connections.js`" once"
Invoke-SafeCommand -Command $monitorCommand -Description "Ejecutando prueba inicial de monitoreo"

Write-Host ""
Write-Host "üìã Configuraci√≥n de monitoreo continuo:" -ForegroundColor Cyan
Write-Host "   Para iniciar monitoreo continuo (cada 5 minutos):" -ForegroundColor White
Write-Host "   node scripts/monitor-db-connections.js start" -ForegroundColor Gray
Write-Host ""
Write-Host "   Para analizar patrones en cualquier momento:" -ForegroundColor White  
Write-Host "   node scripts/monitor-db-connections.js analyze" -ForegroundColor Gray
Write-Host ""

# Fase 3: Optimizaci√≥n VPC Connector
Write-Host "üí∞ FASE 3: Optimizaci√≥n de Costos VPC" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

if (-not $SkipVPCOptimization) {
    Write-Host "Analizando optimizaci√≥n del VPC Connector..." -ForegroundColor Yellow
    
    $vpcCommand = "node `"$SCRIPT_DIR\optimize-vpc-connector.js`" analyze"
    Invoke-SafeCommand -Command $vpcCommand -Description "Ejecutando an√°lisis de VPC Connector"
    
    Write-Host ""
    Write-Host "üìã Para aplicar optimizaci√≥n VPC despu√©s del an√°lisis:" -ForegroundColor Cyan
    Write-Host "   1. Revisar recomendaciones del an√°lisis anterior" -ForegroundColor White
    Write-Host "   2. Ejecutar comandos sugeridos en horario de bajo tr√°fico" -ForegroundColor White
    Write-Host "   3. Monitorear servicios por 15 minutos post-cambio" -ForegroundColor White
    
} else {
    Write-Host "‚è≠Ô∏è  Omitiendo optimizaci√≥n VPC (SkipVPCOptimization activado)" -ForegroundColor Blue
}

Write-Host ""

# Fase 4: Configurar an√°lisis continuo
Write-Host "üîÑ FASE 4: An√°lisis Continuo" -ForegroundColor Green
Write-Host "============================" -ForegroundColor Green

Write-Host "Configurando an√°lisis autom√°tico de patrones IP..." -ForegroundColor Yellow

# Crear script de automatizaci√≥n para Windows
$automationScript = @"
#!/usr/bin/env pwsh
# Script de automatizaci√≥n para ejecutar an√°lisis diario de IPs
# Ejecutar este script diariamente para mantener an√°lisis actualizado

Set-Location "$SCRIPT_DIR\.."

Write-Host "üîç Ejecutando an√°lisis diario de patrones IP..." -ForegroundColor Yellow
Write-Host "Fecha: `$(Get-Date)" -ForegroundColor Gray

# Ejecutar an√°lisis de patrones
node scripts/monitor-db-connections.js analyze

# Si hay suficientes datos (m√°s de 7 d√≠as), generar reporte
`$logFile = "logs/db-connections.jsonl"
if (Test-Path `$logFile) {
    `$lines = (Get-Content `$logFile | Measure-Object -Line).Lines
    if (`$lines -gt 2000) {  # Aproximadamente 7 d√≠as de datos cada 5 minutos
        Write-Host "üìä Datos suficientes detectados. Generando reporte de recomendaciones..." -ForegroundColor Green
        
        # Aqu√≠ se podr√≠a agregar l√≥gica adicional para generar recomendaciones
        # basadas en los patrones identificados
    }
}

Write-Host "‚úÖ An√°lisis diario completado" -ForegroundColor Green
"@

$dailyScriptPath = "$SCRIPT_DIR\daily-ip-analysis.ps1"
$automationScript | Out-File -FilePath $dailyScriptPath -Encoding UTF8

Write-Host "‚úÖ Script de an√°lisis diario creado: daily-ip-analysis.ps1" -ForegroundColor Green

Write-Host ""

# Resumen final
Write-Host "üéâ IMPLEMENTACI√ìN COMPLETADA" -ForegroundColor Green
Write-Host "============================" -ForegroundColor Green
Write-Host ""

Write-Host "üìä Estado de implementaci√≥n:" -ForegroundColor Cyan
if (-not $SkipIPAddition) {
    Write-Host "   ‚úÖ Fase 1: IP personal agregada a PostgreSQL" -ForegroundColor Green
} else {
    Write-Host "   ‚è≠Ô∏è  Fase 1: Omitida (SkipIPAddition)" -ForegroundColor Blue
}
Write-Host "   ‚úÖ Fase 2: Monitoreo de IPs configurado" -ForegroundColor Green
if (-not $SkipVPCOptimization) {
    Write-Host "   ‚úÖ Fase 3: An√°lisis VPC completado" -ForegroundColor Green
} else {
    Write-Host "   ‚è≠Ô∏è  Fase 3: Omitida (SkipVPCOptimization)" -ForegroundColor Blue
}
Write-Host "   ‚úÖ Fase 4: An√°lisis continuo configurado" -ForegroundColor Green

Write-Host ""
Write-Host "üöÄ PR√ìXIMOS PASOS RECOMENDADOS:" -ForegroundColor Yellow
Write-Host ""

Write-Host "1Ô∏è‚É£  INMEDIATO (hoy):" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Iniciar monitoreo continuo:" -ForegroundColor White
Write-Host "     node scripts/monitor-db-connections.js start" -ForegroundColor Gray
Write-Host ""

Write-Host "2Ô∏è‚É£  ESTA SEMANA:" -ForegroundColor Cyan  
Write-Host "   ‚Ä¢ Configurar DBeaver con nueva IP autorizada" -ForegroundColor White
Write-Host "   ‚Ä¢ Aplicar optimizaci√≥n VPC seg√∫n an√°lisis" -ForegroundColor White
Write-Host "   ‚Ä¢ Configurar tarea programada para an√°lisis diario" -ForegroundColor White
Write-Host ""

Write-Host "3Ô∏è‚É£  EN 30-60 D√çAS:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Revisar patrones IP recopilados:" -ForegroundColor White
Write-Host "     node scripts/monitor-db-connections.js analyze" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Evaluar implementaci√≥n de rangos IP espec√≠ficos" -ForegroundColor White
Write-Host "   ‚Ä¢ Considerar eliminaci√≥n gradual de 0.0.0.0/0" -ForegroundColor White

Write-Host ""
Write-Host "üí° BENEFICIOS DE ESTA ESTRATEGIA:" -ForegroundColor Yellow
Write-Host "   ‚úÖ Riesgo operacional m√≠nimo (mantiene conectividad actual)" -ForegroundColor Green
Write-Host "   ‚úÖ Datos emp√≠ricos para decisiones futuras" -ForegroundColor Green  
Write-Host "   ‚úÖ Ahorro inmediato en costos VPC (~$15-25/mes)" -ForegroundColor Green
Write-Host "   ‚úÖ Acceso DBeaver sin impacto en producci√≥n" -ForegroundColor Green
Write-Host "   ‚úÖ Base s√≥lida para optimizaciones futuras" -ForegroundColor Green

Write-Host ""
if ($DryRun) {
    Write-Host "üîç SIMULACI√ìN COMPLETADA - No se aplicaron cambios reales" -ForegroundColor Blue
} else {
    Write-Host "‚úÖ IMPLEMENTACI√ìN REAL COMPLETADA" -ForegroundColor Green
}

Write-Host ""
Write-Host "üìû ¬øPreguntas? Revisa los logs en: logs/db-connections.jsonl" -ForegroundColor Gray