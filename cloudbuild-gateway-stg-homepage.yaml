# Xafra-ads v5 - Gateway Production Update (SAFE MIGRATION)
# This build updates the main gateway-stg with homepage support

steps:
  # Step 1: Build homepage React app
  - name: 'node:18-alpine'
    dir: 'homepage'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Building React homepage for production..."
        npm install --silent
        npm run build
        echo "Homepage build completed"
        ls -la dist/
    id: 'build-homepage'

  # Step 2: Copy homepage build to nginx directory  
  - name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Copying homepage files to nginx directory..."
        mkdir -p infrastructure/nginx/homepage
        cp -r homepage/dist/* infrastructure/nginx/homepage/
        echo "Files copied successfully:"
        ls -la infrastructure/nginx/homepage/
    id: 'copy-homepage'
    waitFor: ['build-homepage']

  # Step 3: Build the main gateway image with homepage
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/xafra-ads/xafra-ads-v5/gateway-stg:latest'
      - '-f'
      - 'infrastructure/nginx/Dockerfile-with-homepage'
      - '.'
    id: 'build-gateway-main'
    waitFor: ['copy-homepage']

  # Step 4: Push the main image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/xafra-ads/xafra-ads-v5/gateway-stg:latest'
    id: 'push-gateway-main'
    waitFor: ['build-gateway-main']

  # Step 5: Deploy to MAIN gateway service with 50% traffic first (SAFE ROLLOUT)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'gateway-stg'
      - '--image'
      - 'us-central1-docker.pkg.dev/xafra-ads/xafra-ads-v5/gateway-stg:latest'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-central1'
      - '--allow-unauthenticated'
      - '--port'
      - '80'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '2'
      - '--concurrency'
      - '100'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '1'
      - '--timeout'
      - '30s'
      - '--set-env-vars'
      - 'ENVIRONMENT=staging,GATEWAY_VERSION=1.1.1-homepage-production'
      - '--no-traffic'  # Deploy without traffic initially for safety
    id: 'deploy-main-service'
    waitFor: ['push-gateway-main']

  # Step 6: Test the updated service
  - name: 'alpine/curl'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Testing updated main gateway service..."
        
        echo "New revision deployed with --no-traffic"
        echo "Getting latest revision name..."
        REVISION_NAME=$(gcloud run services describe gateway-stg --region=us-central1 --format="value(status.latestCreatedRevisionName)")
        echo "Latest revision: $$REVISION_NAME"
        
        echo "To manually test the new revision, run:"
        echo "gcloud run services update-traffic gateway-stg --region=us-central1 --to-revisions=$$REVISION_NAME=100"
        
        echo "âœ… Deployment completed safely with no traffic"
        echo "Manual migration required after testing"
    id: 'test-main-service'
    waitFor: ['deploy-main-service']

# Build options for faster execution
options:
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY

# Timeout for safety
timeout: '600s'

# Substitutions
substitutions:
  _SERVICE_NAME: 'gateway-stg'
  _IMAGE_TAG: 'latest'